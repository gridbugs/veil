// Generated file. Do not edit!

macro_rules! imports {
    () => {
{{#each imports}}
        use {{this}};
{{/each}}
    }
}

macro_rules! num_components {
    () => { {{num_components}} }
}

macro_rules! component_bits {
    () => { {{component_bits}} }
}

macro_rules! component_type_decl {
    ($ComponentType:ident) => {
        enum_from_primitive! {
        #[derive(Clone, Copy, Hash, PartialEq, Eq, Debug, Serialize, Deserialize)]
        pub enum $ComponentType {
{{#each components}}
    {{name}},
{{/each}}
        }
        }
    }
}

macro_rules! entity_store_decl {
    ($EntityStore:ident) => {
        #[derive(Serialize, Deserialize, Debug)]
        pub struct $EntityStore {
{{#each components}}
    {{#if type}}
            pub {{@key}}: HashMap<EntityId, {{type}}>,
    {{else}}
            pub {{@key}}: HashSet<EntityId>,
    {{/if}}
{{/each}}
        }
    }
}

macro_rules! entity_store_cons {
    ($EntityStore:ident) => {
        $EntityStore {
{{#each components}}
    {{#if type}}
            {{@key}}: HashMap::new(),
    {{else}}
            {{@key}}: HashSet::new(),
    {{/if}}
{{/each}}
        }
    }
}

macro_rules! commit_insertions {
    ($self:ident, $source:ident) => {
        {
{{#each components}}
    {{#if type}}
            merge_hash_maps(&mut $self.{{@key}}, &mut $source.{{@key}});
    {{else}}
            merge_hash_sets(&mut $self.{{@key}}, &mut $source.{{@key}});
    {{/if}}
{{/each}}
        }
    }
}

macro_rules! remove_component {
    ($self:ident, $entity:ident, $component_type:ident) => {
        {
            match $component_type {
{{#each components}}
                ComponentType::{{name}} => { $self.{{@key}}.remove(&$entity); }
{{/each}}
            }
        }
    }
}

macro_rules! remove_component_into {
    ($self:ident, $entity:ident, $component_type:ident, $dest:expr) => {
        {
            match $component_type {
{{#each components}}
                ComponentType::{{name}} => {
    {{#if type}}
                    if let Some(v) = $self.{{@key}}.remove(&$entity) {
                        $dest.{{@key}}.insert($entity, v);
                    }
    {{else}}
                    if $self.{{@key}}.remove(&$entity) {
                        $dest.{{@key}}.insert($entity);
                    }
    {{/if}}
                }
{{/each}}
            }
        }
    }
}

macro_rules! insert_all {
    ($self:ident, $entity:ident, $store:ident) => {
        {
{{#each components}}
    {{#if type}}
            if $store.{{@key}}.contains_key(&$entity) { $self.insert($entity, ComponentType::{{name}}); }
    {{else}}
            if $store.{{@key}}.contains(&$entity) { $self.insert($entity, ComponentType::{{name}}); }
    {{/if}}
{{/each}}
        }
    }
}

macro_rules! component_type_cons_methods {
    () => {
{{#each components}}
        pub fn {{@key}}() -> Self { ComponentType::{{name}} }
{{/each}}
    }
}
